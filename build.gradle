plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version '1.7.2'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.3.1'
}

repositories {
    maven { url = "https://maven.terraformersmc.com" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://ladysnake.jfrog.io/artifactory/mods" }
    maven {
        url = "https://maven.florens.be"
        content {
            includeGroup "be.florens"
        }
    }
    maven { url = "https://maven.parchmentmc.org" }
    maven {
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    // Leave these as lowest priority
    maven {
        url = "https://jitpack.io"
        content {
            includeGroupByRegex "com.github.*"
        }
    }
    mavenLocal()
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version + '+fabric'
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/artifacts.accesswidener")
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
    // For easier copying from Forge version of the mod
    // We don't generate these resources ourselves
    main {
        resources {
            srcDirs += file("src/generated/resources")
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Runtime mod libraries
    implementation annotationProcessor(include("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}"))
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation("dev.emi:trinkets:${project.trinkets_version}") {
        transitive = false
    }
    modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}")
    modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}")
    modImplementation include("be.florens:expandability-fabric:${project.expandability_version}")
    modImplementation "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"
    modImplementation include("com.github.emilyploszaj:step-height-entity-attribute:${project.step_height_attr_version}") {
        transitive = false
    }

    // Integration & plugins
    modImplementation("com.terraformersmc:modmenu:${project.mod_menu_version}") {
        transitive = false
    }
    modImplementation "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"

    // Compat & integration
    modCompileOnly("curse.maven:origins-391943:${project.origins_version}") {
        transitive = false
    }
    modCompileOnly("com.github.apace100:apoli:v${project.apoli_version}") {
        transitive = false
    }
    modCompileOnly("com.github.apace100:calio:v${project.calio_version}") {
        transitive = false
    }
    modCompileOnly("curse.maven:haema-391257:${project.haema_version}") {
        transitive = false
    }

    // Dev runtime
    testmodImplementation sourceSets.main.output
    modRuntimeOnly "be.florens:autoload-fabric:${project.autoload_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

curseforge {
    if (System.getenv("CURSE_API_KEY") != null) {
        apiKey = System.getenv("CURSE_API_KEY")

        project {
            id = "401236"
            releaseType = "release"

            changelogType = "markdown"
            changelog = System.getenv("CHANGELOG") ?: "https://github.com/florensie/artifacts-fabric/blob/master/CHANGELOG.md"

            addGameVersion "1.19"
            addGameVersion "Fabric"
            relations {
                requiredDependency "fabric-api"
                requiredDependency "cloth-config"
                requiredDependency "trinkets"
                embeddedLibrary "cardinal-components"
                embeddedLibrary "expandability"
                optionalDependency "modmenu"
            }

            mainArtifact(remapJar.archiveFile) {
                displayName = "${project.mod_version} for Minecraft 1.19"
            }

            afterEvaluate {
                uploadTask.dependsOn(remapJar)
            }
        }
    }

    options {
        forgeGradleIntegration = false
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "artifacts"
    versionName = project.mod_version + " for Fabric " + project.minecraft_version
    uploadFile = remapJar
    changelog = System.getenv("CHANGELOG") ?: "https://github.com/florensie/artifacts-fabric/blob/master/CHANGELOG.md"

    dependencies {
        required.project "fabric-api"
        required.project "trinkets"
        required.project "cloth-config"
    }
}
